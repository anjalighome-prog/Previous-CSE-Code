import java.util.*;
import java.io.*;
public class TodoList {
    // Fields
    // todos: the list of todo items in the list
    // complete: the list of items tha were marked as done
    private List<String> todos;
    private List<String> complete;

    // Constructor
    // Initializes the two ArrayLists with no input
    public TodoList()
    {
        this.todos = new ArrayList<String>();
        this.complete = new ArrayList<String>();
    }

    // Behavior:
    // - This method formats the items in the todos array into a viewr friendly way
    // Exception:
    // - None
    // Return:
    // - String: The formated list
    // Parameters:
    // - None
    public String getTodos()
    {
        String list = "Today's TODOs:\n";
        if(this.todos.size() == 0) // if the list is empty
        {
            list += "  You have nothing to do yet today! Relax!\n";
        }
        else // prints them line by line with ordering
        {
            for(int i = 0; i < this.todos.size(); i++)
            {
                list += " " + (i + 1) + ": " + this.todos.get(i) + "\n";
            }
        }
        return list;
    }

    // Behavior:
    // - This returns the size of the todo list
    // Exception:
    // - None
    // Return:
    // - int: the size of todos
    // Parameters:
    // - None
    public int getTodoSize()
    {
        return this.todos.size();
    }

    // Behavior:
    // - This method adds an item to the list at a given index if that is provided
    // Exception:
    // - None
    // Return:
    // - None
    // Parameters:
    // - input: The item to add
    // - inputIndex: The index to place the input in the list
    public void addItem(String input, String inputIndex)
    {
        if(todos.size() == 0) // automatically adds to the end
        {
            todos.add(input);
        }
        else
        {
            if(inputIndex.equals("")) // enter in the input
            {
                todos.add(input); // just adds to the end
            }
            else // adds to the specific index, but converts it to 0 base first
            {
                int index = Integer.parseInt(inputIndex);
                todos.add(index - 1, input);
            }
        }
    }

    // Behavior:
    // - This method removes an item at the given idex as done and then places the item in
    //    the complete list
    // Exception:
    // - None
    // Return:
    // - None
    // Parameters:
    // - input: The index the item the user wants to remove from the todo list
    public void markItemAsDone(String input)
    {
        if(todos.size() > 0)
        {
            int index = Integer.parseInt(input); // assuming given an Integer
            complete.add(todos.get(index - 1)); // adds to completed tasks list
            todos.remove(index - 1); // then removes it from todo list
        }
    }

    // Behavior:
    // - This method loads items from an external file into the todo list
    // Exception:
    // - FileNotFoundException: If the file does not exist
    // Return:
    // - None
    // Parameters:
    // - fileName: The name of the file the loading is from
    public void loadItems(String fileName) throws FileNotFoundException
    {
        File input = new File(fileName); // converting into a file

        Scanner fileScan = new Scanner(input); // reads the file line by line
        todos.clear(); // clears the todo list to fill with new tasks
        while(fileScan.hasNextLine())
        {
            todos.add(fileScan.nextLine()); // fills the todo list with new tasks
        }
        fileScan.close(); // idk good protocol?
    }

    // Behavior:
    // - This method saves the existing items from the todo list into an external file
    // Exception:
    // - FileNotFoundException: If the file does not exist
    // Return:
    // - None
    // Parameters:
    // - inputFile: The name of the file the todo list items will be saved to
    public void saveItems(String inputFile) throws FileNotFoundException 
    {
        File givenFile = new File(inputFile); // turns it into a file
        PrintStream writer = new PrintStream(givenFile); 
        
        // writing to the file
        for(int i = 0; i < todos.size(); i++)
        {
            writer.println(todos.get(i));
        }        
    }

    // Behavior:
    // - This method will display the items that were marked as complete after all the 
    //   operations done to the TodoList instance, in a formated way
    // Exception:
    // - None
    // Return:
    // - String: The items of the list that were completed in a view friendly way
    // Parameters:
    // - None
    public String completedTasks()
    {
        if(complete.size() == 0) // if it is empty :(
        {
            return "Looks like you tried today! Better luck tomorrow!";
        }
        else
        {
            String output = "Today was a productive day!\nWhat you accomplished today:\n";
            for(int i = 0; i < complete.size(); i++)
            {
                // just prints in order with indexing
                output += (i + 1) + ": " + complete.get(i) + "\n";
            }
            return output;
        }
    }
}

public class TodoListMain {
    public static final boolean EXTENSION_FLAG = false;
    public static void main(String[] args) throws FileNotFoundException {
        TodoList todoList = new TodoList();
        Scanner console = new Scanner(System.in);
        String given = "";

        System.out.println("Welcome to your TODO List Manager!");

        while(!(given.equalsIgnoreCase("Q")))
        {
            System.out.println("What would you like to do?");
            System.out.print("(A)dd TODO, (M)ark TODO as done, (L)oad TODOs, (S)ave TODOs, (Q)uit? ");
            given = console.nextLine();

            if(given.equalsIgnoreCase("A"))
            {
                System.out.print("What would you like to add? ");
                String input = console.nextLine();
                if(todoList.getTodoSize() == 0)
                {
                    todoList.addItem(input, "");
                }
                else
                {
                    System.out.print("Where in the list should it be (1-" + (todoList.getTodoSize()+1) 
                                    + ")? (Enter for end): ");
                    String newInput = console.nextLine();
                    todoList.addItem(input, newInput);
                }
                System.out.println(todoList.getTodos());
            }
            else if(given.equalsIgnoreCase("M"))
            {
                if(todoList.getTodoSize() > 0) // makes sure that nothing is removed from empty list
                {
                    System.out.print("Which item did you complete (1-" + (todoList.getTodoSize())
                            + ")? ");
                    String input = console.nextLine();
                    todoList.markItemAsDone(input);
                }
                else
                {
                    System.out.println("All done! Nothing left to mark as done!");
                }
                System.out.println(todoList.getTodos());
            }
            else if(given.equalsIgnoreCase("L"))
            {
                // recieving the file name
                System.out.print("File name? ");
                String fileInput = console.nextLine();
                todoList.loadItems(fileInput);
                System.out.println(todoList.getTodos());
            }
            else if(given.equalsIgnoreCase("S"))
            {
                // recieves file name
                System.out.print("File name? ");
                String inputFile = console.nextLine();
                todoList.saveItems(inputFile);
                System.out.println(todoList.getTodos());
            }
            else if(!(given.equalsIgnoreCase("Q")))
            {
                System.out.println("Unknown input: " + given);
                System.out.println(todoList.getTodos());
            }
        }
        if(EXTENSION_FLAG)
        {
            System.out.println(todoList.completedTasks());
        }
    }
}